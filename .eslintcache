[{"D:\\React\\demo-upt\\src\\index.tsx":"1","D:\\React\\demo-upt\\src\\App.tsx":"2","D:\\React\\demo-upt\\src\\Containers\\DrawToolComponent.tsx":"3","D:\\React\\demo-upt\\src\\Drawtool\\draw-tool\\DrawTool.ts":"4","D:\\React\\demo-upt\\src\\Drawtool\\draw-tool\\DrawHistory.ts":"5","D:\\React\\demo-upt\\src\\Drawtool\\draw-tool\\Sides.ts":"6","D:\\React\\demo-upt\\src\\Drawtool\\utils\\errors.ts":"7","D:\\React\\demo-upt\\src\\Drawtool\\utils\\escapeJSON.ts":"8","D:\\React\\demo-upt\\src\\Drawtool\\draw-tool\\Side.ts":"9","D:\\React\\demo-upt\\src\\Drawtool\\draw-tool\\Items.ts":"10","D:\\React\\demo-upt\\src\\Drawtool\\draw-tool\\Layers.ts":"11","D:\\React\\demo-upt\\src\\Drawtool\\utils\\clip.ts":"12","D:\\React\\demo-upt\\src\\Drawtool\\draw-tool\\Item.ts":"13"},{"size":219,"mtime":1607690246228,"results":"14","hashOfConfig":"15"},{"size":11418,"mtime":1607951701164,"results":"16","hashOfConfig":"15"},{"size":580,"mtime":1607830279765,"results":"17","hashOfConfig":"15"},{"size":6190,"mtime":1607949830898,"results":"18","hashOfConfig":"15"},{"size":2458,"mtime":1607830159415,"results":"19","hashOfConfig":"15"},{"size":1379,"mtime":1607764439682,"results":"20","hashOfConfig":"15"},{"size":331,"mtime":1607692463886,"results":"21","hashOfConfig":"15"},{"size":202,"mtime":1607763261579,"results":"22","hashOfConfig":"15"},{"size":61766,"mtime":1607951539990,"results":"23","hashOfConfig":"15"},{"size":313,"mtime":1607691416245,"results":"24","hashOfConfig":"15"},{"size":6691,"mtime":1607830179715,"results":"25","hashOfConfig":"15"},{"size":8129,"mtime":1607829994804,"results":"26","hashOfConfig":"15"},{"size":1588,"mtime":1607691418766,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"2oitw0",{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"D:\\React\\demo-upt\\src\\index.tsx",[],["57","58"],"D:\\React\\demo-upt\\src\\App.tsx",["59","60"],"D:\\React\\demo-upt\\src\\Containers\\DrawToolComponent.tsx",["61"],"import { Component, ReactNode } from \"react\";\r\nimport DrawTool from \"../Drawtool/draw-tool/DrawTool\";\r\n\r\ninterface Props {\r\n    colors:any\r\n }\r\n\r\ninterface State {\r\n    node: ReactNode\r\n};\r\n\r\nclass DrawToolComponent extends Component<Props, State>{\r\n    state: State = {\r\n        node: null\r\n    };\r\n\r\n    componentDidMount() {\r\n        DrawTool.initialize(this.state.node as HTMLElement, {});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"draw-tool\" ref={(node) => { this.state.node = node}} />\r\n        );\r\n    }\r\n}\r\n\r\nexport default DrawToolComponent;","D:\\React\\demo-upt\\src\\Drawtool\\draw-tool\\DrawTool.ts",[],"D:\\React\\demo-upt\\src\\Drawtool\\draw-tool\\DrawHistory.ts",[],"D:\\React\\demo-upt\\src\\Drawtool\\draw-tool\\Sides.ts",[],"D:\\React\\demo-upt\\src\\Drawtool\\utils\\errors.ts",[],"D:\\React\\demo-upt\\src\\Drawtool\\utils\\escapeJSON.ts",[],"D:\\React\\demo-upt\\src\\Drawtool\\draw-tool\\Side.ts",["62","63"],"D:\\React\\demo-upt\\src\\Drawtool\\draw-tool\\Items.ts",[],"D:\\React\\demo-upt\\src\\Drawtool\\draw-tool\\Layers.ts",[],"D:\\React\\demo-upt\\src\\Drawtool\\utils\\clip.ts",["64","65","66"],"export default function (border: any, offset = true) {\r\n\r\n  if (typeof border._objects !== 'undefined' && border._objects.length > 0 && border._objects[0].type === 'path') {\r\n    var generate = function () {\r\n      return `\r\n          if(!!this.lastBorder){\r\n              var dataBoder=JSON.parse(this.lastBorder);\r\n              if(dataBoder.isPath){\r\n                    var border = dataBoder.border;\r\n                    var offsetY = dataBoder.offsetY;\r\n                    var offsetX = dataBoder.offsetX;\r\n        \r\n                    this.setCoords();\r\n                    ctx.save();\r\n                    var m = this.calcTransformMatrix();\r\n                    var iM = fabric.util.invertTransform(m);\r\n                    ctx.transform.apply(ctx, iM);\r\n                    ctx.beginPath();\r\n                    for(var i=0;i<dataBoder.allBorder.length;i++){\r\n                      let path = dataBoder.allBorder[i];\r\n                      var valueX=offsetX - dataBoder.minX * border.scaleX + (dataBoder.drawToolBorder.strokeWidth / 2) * border.scaleX;\r\n                      var valueY=offsetY - dataBoder.minY * border.scaleY + (dataBoder.drawToolBorder.strokeWidth / 2) * border.scaleY;\r\n                      DrawTool.drawPathOnCtx.call(\r\n                        path,\r\n                        ctx,\r\n                        valueX,\r\n                        valueY,\r\n                        border.scaleX,\r\n                        border.scaleY\r\n                      );\r\n  \r\n                    }\r\n        \r\n                    ctx.closePath();\r\n                    ctx.restore();\r\n              }\r\n              else\r\n              {\r\n                  this.setCoords();\r\n                  var clipRect = dataBoder.border;\r\n                  var offsetY = dataBoder.offsetY;\r\n                  var offsetX = dataBoder.offsetX;\r\n                  ctx.save();\r\n                  var m = this.calcTransformMatrix();\r\n                  var iM = fabric.util.invertTransform(m);\r\n                  ctx.transform.apply(ctx, iM);\r\n                  ctx.beginPath();\r\n          \r\n                  ctx.rect(\r\n                    offsetX,\r\n                    offsetY,\r\n                    clipRect.width - clipRect.strokeWidth,\r\n                    clipRect.height - clipRect.strokeWidth\r\n                  );\r\n                  ctx.closePath();\r\n                  ctx.restore();\r\n              }\r\n          }\r\n          else\r\n          {\r\n            if((!!DrawTool.sides.selected.FabricBorder._objects)&&(DrawTool.sides.selected.FabricBorder._objects.length>0)){\r\n              var border = fabric.util.object.clone(DrawTool.sides.selected.FabricBorder._objects[0]);\r\n              var offset = ${JSON.stringify(offset)};\r\n              if(offset){\r\n                var offsetY = DrawTool.sides.selected.FabricBorder.top;\r\n                var offsetX = DrawTool.sides.selected.FabricBorder.left;\r\n              } else {\r\n                var offsetY = 0;\r\n                var offsetX = 0;\r\n              }\r\n  \r\n              this.setCoords();\r\n              ctx.save();\r\n              var m = this.calcTransformMatrix();\r\n              var iM = fabric.util.invertTransform(m);\r\n              ctx.transform.apply(ctx, iM);\r\n              ctx.beginPath();\r\n  \r\n              Array.prototype.forEach.call(DrawTool.sides.selected.FabricBorder._objects, function(path, i) {\r\n                DrawTool.drawPathOnCtx.call(\r\n                  path,\r\n                  ctx,\r\n                  offsetX - border.minX * border.scaleX + (DrawTool.border.strokeWidth / 2) * border.scaleX,\r\n                  offsetY - border.minY * border.scaleY + (DrawTool.border.strokeWidth / 2) * border.scaleY,\r\n                  border.scaleX,\r\n                  border.scaleY\r\n                );\r\n              });\r\n  \r\n              ctx.closePath();\r\n              ctx.restore();\r\n            }\r\n            else\r\n            {\r\n  \r\n              this.setCoords();\r\n                var offsetY = DrawTool.sides.selected.FabricBorder.top;\r\n                var offsetX = DrawTool.sides.selected.FabricBorder.left;\r\n                ctx.save();\r\n                var m = this.calcTransformMatrix();\r\n                var iM = fabric.util.invertTransform(m);\r\n                ctx.transform.apply(ctx, iM);\r\n                ctx.beginPath();\r\n        \r\n                ctx.rect(\r\n                  offsetX,\r\n                  offsetY,\r\n                  DrawTool.sides.selected.FabricBorder.width - DrawTool.sides.selected.FabricBorder.strokeWidth,\r\n                  DrawTool.sides.selected.FabricBorder.height - DrawTool.sides.selected.FabricBorder.strokeWidth\r\n                );\r\n                ctx.closePath();\r\n                ctx.restore();\r\n  \r\n            }\r\n          }\r\n          `;\r\n    }\r\n  } else {\r\n    var rect = Object.assign({}, {\r\n      left: border.left,\r\n      top: border.top,\r\n      width: border.width,\r\n      height: border.height,\r\n      strokeWidth: border.strokeWidth,\r\n    });\r\n\r\n    var generate = function () {\r\n      return `\r\n          if(!!this.lastBorder){\r\n            var dataBoder=JSON.parse(this.lastBorder);\r\n            if(dataBoder.isPath){\r\n                    var border = dataBoder.border;\r\n                    var offsetY = dataBoder.offsetY;\r\n                    var offsetX = dataBoder.offsetX;\r\n        \r\n                    this.setCoords();\r\n                    ctx.save();\r\n                    var m = this.calcTransformMatrix();\r\n                    var iM = fabric.util.invertTransform(m);\r\n                    ctx.transform.apply(ctx, iM);\r\n                    ctx.beginPath();\r\n                    for(var i=0;i<dataBoder.allBorder.length;i++){\r\n                      let path = dataBoder.allBorder[i];\r\n                      var valueX=offsetX - dataBoder.minX * border.scaleX + (dataBoder.drawToolBorder.strokeWidth / 2) * border.scaleX;\r\n                      var valueY=offsetY - dataBoder.minY * border.scaleY + (dataBoder.drawToolBorder.strokeWidth / 2) * border.scaleY;\r\n                      DrawTool.drawPathOnCtx.call(\r\n                        path,\r\n                        ctx,\r\n                        valueX,\r\n                        valueY,\r\n                        border.scaleX,\r\n                        border.scaleY\r\n                      );\r\n                    }\r\n        \r\n                    ctx.closePath();\r\n                    ctx.restore();\r\n            }\r\n            else\r\n            {\r\n              this.setCoords();\r\n              var clipRect = dataBoder.border;\r\n              var offsetY = dataBoder.offsetY;\r\n              var offsetX = dataBoder.offsetX;\r\n              ctx.save();\r\n              var m = this.calcTransformMatrix();\r\n              var iM = fabric.util.invertTransform(m);\r\n              ctx.transform.apply(ctx, iM);\r\n              ctx.beginPath();\r\n      \r\n              ctx.rect(\r\n                offsetX,\r\n                offsetY,\r\n                clipRect.width - clipRect.strokeWidth,\r\n                clipRect.height - clipRect.strokeWidth\r\n              );\r\n              ctx.closePath();\r\n              ctx.restore();\r\n            }\r\n          }\r\n          else\r\n          {\r\n             this.setCoords();\r\n              var clipRect = ${JSON.stringify(rect)};\r\n              var offset = ${JSON.stringify(offset)};\r\n      \r\n              if(offset){\r\n                var offsetY = clipRect.top;\r\n                var offsetX = clipRect.left;\r\n              } else {\r\n                var offsetY = 0;\r\n                var offsetX = 0;\r\n              }\r\n              ctx.save();\r\n              var m = this.calcTransformMatrix();\r\n              var iM = fabric.util.invertTransform(m);\r\n              ctx.transform.apply(ctx, iM);\r\n              ctx.beginPath();\r\n      \r\n              ctx.rect(\r\n                offsetX,\r\n                offsetY,\r\n                clipRect.width - clipRect.strokeWidth,\r\n                clipRect.height - clipRect.strokeWidth\r\n              );\r\n              ctx.closePath();\r\n              ctx.restore();\r\n          }\r\n  \r\n          `\r\n    }\r\n  }\r\n\r\n  return new Function('ctx', generate());\r\n};\r\n","D:\\React\\demo-upt\\src\\Drawtool\\draw-tool\\Item.ts",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":265,"column":7,"nodeType":"73","messageId":"74","endLine":265,"endColumn":20},{"ruleId":"75","severity":1,"message":"76","line":265,"column":51,"nodeType":"77","messageId":"78","endLine":265,"endColumn":53},{"ruleId":"79","severity":1,"message":"80","line":23,"column":57,"nodeType":"81","endLine":23,"endColumn":67},{"ruleId":"82","severity":1,"message":"83","line":1149,"column":13,"nodeType":"84","messageId":"85","endLine":1149,"endColumn":26},{"ruleId":"71","severity":1,"message":"86","line":1174,"column":17,"nodeType":"73","messageId":"74","endLine":1174,"endColumn":21},{"ruleId":"87","severity":1,"message":"88","line":1,"column":1,"nodeType":"89","endLine":215,"endColumn":2},{"ruleId":"90","severity":1,"message":"91","line":127,"column":9,"nodeType":"73","messageId":"92","endLine":127,"endColumn":17},{"ruleId":"93","severity":1,"message":"94","line":214,"column":10,"nodeType":"95","messageId":"96","endLine":214,"endColumn":41},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"@typescript-eslint/no-unused-vars","'overlayImages' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'that' is assigned a value but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","@typescript-eslint/no-redeclare","'generate' is already defined.","redeclared","no-new-func","The Function constructor is eval.","NewExpression","noFunctionConstructor","no-global-assign","no-unsafe-negation"]